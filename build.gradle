plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'idea'
}

version = "0.18.0"
group= "mysticalmechanics" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = "Mystical Mechanics"

java {
    archivesBaseName = "Mystical Mechanics"
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'snapshot', version: '20211108-1.15.1'
    accessTransformer = file('src/main/resources/META-INF/mm_at.cfg')
    //version = "1.12.2-14.23.4.2705"
    //runDir = "run"
    //mappings = "snapshot_20171125"
    //replace "%VERSION%": "${project.version}"
    //useDepAts = true
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                mysticalmechanics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                mysticalmechanics {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mysticalmechanics', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mysticalmechanics {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes 'FMLAT': 'mm_at.cfg'

        /*([
                "Specification-Title"     : "MysticalMechanics",
                //"Specification-Vendor": "mysticalmechanics authors",
                "Specification-Version"   : "0.18.0", // We are version 1 of ourselves
                "Implementation-Title"    : project.mysticalmechanics,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "mysticalmechanics authors",
                //"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])*/
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier "dev"
}

artifacts {
    archives deobfJar
}

repositories {
    maven {
        url 'http://dvs1.progwml6.com/files/maven'
        allowInsecureProtocol true
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.57'
    implementation fg.deobf("mezz.jei:jei-1.15.2:6.0.3.16")
    compileOnly files('libs/')
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea { module { inheritOutputDirs = true } }
